#!/bin/bash
# Build the .tex cover.

declare fullScriptName=$_
declare scriptName=$(basename $0)

declare toDir="cover"
declare parametersName

declare trialRun=0
declare verbose=0
declare quiet=0
declare logindex=1
declare rv

#------------------------------------------------------------------------
# Terminate the script with a failure message.

# echo text if not quiet
function qecho()
{
    if [[ $quiet -eq 0 ]]; then
        echo "$@"
    fi
}

# echo text if in verbose mode.
function vecho()
{
    if [[ $verbose -eq 1 ]]; then
        echo "$@"
    fi
}

function fail()
{
    local msg=$1
    qecho "[$scriptName] *** Failed: $msg"
    exit 666
}

function requireFile()
{
	local fileType=$1
	local fileName=$2
    if [[ ! -e "$fileName" ]]; then
        fail "$fileType input file '$fileName' does not exist"
    fi
}

function checkDir()
{
	local dirName=$1
	local fileName=$2
    if [[ -e "$dirName" ]]; then
        local toFile="$dirName/$fileName"
        if ! [[ -e "$toFile" ]]; then
            qecho "*** Suspicious target directory. Clear it yourself first."
            fail "$toFile should exist."
        fi
    fi
}

#------------------------------------------------------------------------
# Run a command and exit if any error code is returned.
function runIgnore()
{
    if [[ $trialRun != 0 ]]; then
        qecho "--Run:[$@]"
    else
       vecho "- $@"
       eval "$@"
    fi
}

#------------------------------------------------------------------------
# Run a command and exit if any error code is returned.
function run()
{
    runIgnore "$@"
    local status=$?
    if [[ $status -ne 0 ]]; then
        qecho "[$scriptName] *** Error with [$1]" >&2
        exit $status
    fi
    return $status
}

#------------------------------------------------------------------------
# Remove a specified extension from a filename if its present.
# Return resulting file in rv.
function removeExtension()
{
    local fileName=$1
    local extName=$2
    if [[ "${fileName%.*}.$extName" == "$fileName" ]]; then
        fileName=${fileName%.*}
    fi
    if [[ "${fileName:(-1)}" == "." ]]; then
        fileName=${fileName%.*}
    fi    
    rv="$fileName"
}

#------------------------------------------------------------------------
# Strip : and = from argument text
function dirArg()
{
    local dirName=$1
    if [[ ${dirName:0:1} == ":" ]] ; then
        dirName=${dirName:1}
    fi
    if [[ "${dirName:0:1}" == "=" ]] ; then
        dirName=${dirName:1}
    fi
    rv="$dirName"
}

#------------------------------------------------------------------------
# Copy files to the target directory conversion (after clearing it)
function copyIfExists()
{
    local theFile=$1
    local theDest=$2
    if [[ -e "$theFile" ]]; then
        run cp "$theFile" "$theDest"
    fi
}

#------------------------------------------------------------------------
# Copy files to the target directory conversion (after clearing it)
function prepareDir()
{
    run mkdir -p "$toDir/logs"
    run cd "cover"
}

# Run a command log its output to a subdirectoried log file.
function logrun()
{
    local msg=$1
    local cmd=$2
    local parms=$3
    local fromstream=$4
    local ignoreError=0
    local logbase=$(basename $cmd)
    local logfile="./logs/${logindex}_$logbase.log"
    if [[ $fromstream -lt 0 ]]; then
        let fromstream=-$fromstream
        let ignoreError=1
    fi
    if [[ $fromstream -eq 0 ]]; then
      local fullcmd="$cmd $parms | tee $logfile"
    else 
      local fullcmd="$cmd $parms $fromstream> $logfile"
    fi
    qecho "- $msg"
    if [[ ignoreError -eq 0 ]]; then
        run "$fullcmd" 
    else
        runIgnore "$fullcmd" 
    fi
    let logindex+=1
}

function makeCover()
{
    local pdfparms="-synctex=1 -interaction=nonstopmode "
    local tex="pdflatex"
    logrun "Pass 1 - Generating Front Cover"      $tex "$pdfparms FrontCover.tex" 1
    logrun "Pass 1 - Generating Back Cover"       $tex "$pdfparms BackCover.tex" 1
    logrun "Pass 1 - Generating Spine for Cover"  $tex "$pdfparms SpineCover.tex" 1
    logrun "Pass 2 - Generating Front Cover"      $tex "$pdfparms FrontCover.tex" 1
    logrun "Pass 2 - Generating Back Cover"       $tex "$pdfparms BackCover.tex" 1
    logrun "Pass 2 - Generating Spine for Cover"  $tex "$pdfparms SpineCover.tex" 1
    logrun "Building Final Cover"                 $tex "$pdfparms Cover.tex" 1
    logrun "Removing intermediate files"          "../bin/texclean" "-a" 1
    run "cp Cover.pdf .."
 }

#------------------------------------------------------------------------
function scriptUsage()
{
    echo "Usage: $scriptName"
    echo "Build a LaTeX cover"
    echo ""
    echo "-t             trial run -- commands are shown but not executed."
    echo "-v             verbose output during command execution."
    echo "-q             quiet output during command execution."
    echo ""
    exit 1
}

#------------------------------------------------------------------------
function main()
{
    logindex=1 #Start the log numbering over each run.
    parametersName="BookParameters"
    requireFile "BookParameters"  "$parametersName.tex"
    requireFile "Cover" "cover/Cover.tex"
    prepareDir
    makeCover
    qecho "- Done."
    exit 0
}

OPTIND=1 # Reset in case getopts has been used previously in the shell.
while getopts "h?vqt" opt; do
    case "$opt" in
        h|\?)
            scriptUsage
            exit 0
            ;;
        v)  verbose=1
            ;;
        q)  quiet=1
            ;;
        t)  trialRun=1
            ;;
    esac
done
shift $((OPTIND-1))
[ "$1" = "--" ] && shift
main "$1" "$2"
# - End of bash script.

